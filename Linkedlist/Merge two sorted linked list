class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        
class SingleLinkedlist:
    def __init__(self):
        self.head = None
        
    def insert(self,value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_node
            
    
    def display(self):
        if self.head is None:
            return "It is an empty linked list"
        temp = self.head
        while temp:
            print(temp.data,end='->')
            temp = temp.next
        print('None')
        
def merged_sortedlist(head1,head2):
        dummy =Node(0)
        tail = dummy
        while head1 and head2:
            if head1.data < head2.data:
                tail.next = head1
                head1 = head1.next
            else:
                tail.next = head2
                head2 = head2.next
            tail = tail.next
        
        if head1:
            tail.next = head1
        if head2:
            tail.next = head2
            
        return dummy.next
        
list1 = SingleLinkedlist()
list2=SingleLinkedlist()
for i in[1,3,5]:
    list1.insert(i)
for j in [2,4,6]:
    list2.insert(j)

list1.display()
list2.display()

merged = merged_sortedlist(list1.head, list2.head)
temp = merged
while temp:
    print(temp.data,end='->')
    temp = temp.next
print('None')
        
        
